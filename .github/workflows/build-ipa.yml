name: Build iOS IPA TestApp

on:
  push:
    branches:
      - alpha/ios-testapp-pipeline

env:
  CONFIGURATION: Debug
  SDK: iphoneos
  DESTINATION: generic/platform=iOS
  XCODE-VERSION: 16.2
  SCHEME: AppAmbitTestingApp
  IOS_INFO_PLIST: AppAmbit-Testing-App-Info-plist
  ARCHIVE_PATH: AppAmbitTestingApp.xcarchive

jobs:
  ios-build:
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate and extract release type from branch name
        run: |
          FULL_BRANCH="${GITHUB_REF#refs/heads/}"

          if [[ "$FULL_BRANCH" == alpha/* || "$FULL_BRANCH" == beta/* || "$FULL_BRANCH" == production/* ]]; then
            TYPE_RELEASE="${FULL_BRANCH%%/*}"
            echo "TYPE_RELEASE=$TYPE_RELEASE" >> $GITHUB_ENV
          else
            echo "Branch '$FULL_BRANCH' does not start with alpha/, beta/ or production/. Exiting..."
            exit 1
          fi

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Reset Keychain Environment
        run: |
          security delete-keychain build.keychain || true
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -l build.keychain

      - name: Decode and install P12 certificate
        env:
          P12_CERTIFICATE_BASE64: ${{ secrets.IOS_P12_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_APPLE_P12_PASSWORD }}
        run: |
          echo "$P12_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: Decode and install Provisioning Profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(security cms -D -i profile.mobileprovision | plutil -extract UUID xml1 -o - - | xmllint --xpath "string(//string)" -)
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          echo "UUID=$UUID" >> $GITHUB_ENV
        
      - name: build archive
        run: |
          cd ${{ github.workspace }}
          xcodebuild -scheme $SCHEME \
          -archivePath $RUNNER_TEMP/AppAmbitTestingApp.xcarchive \
          -sdk $SDK \
          -configuration $CONFIGURATION \
          -destination $DESTINATION \
          clean archive

      - name: Create ExportOption.plist file
        run: |
          cd ${{ github.workspace }}
          cat > $(IOS_INFO_PLIST) <<EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
              <key>compileBitcode</key>
              <true/>
              <key>method</key>
              <string>release-testing</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>$(BUNDLE_IDENTIFIER)</key>
                <string>$(IOS_ADHOC_PROFILE)</string>
              </dict>
              <key>signingCertificate</key>
              <string>iPhone Distribution</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>$(IOS_APPLE_TEAM_ID)</string>
              <key>thinning</key>
              <string>&lt;none&gt;</string>
            </dict>
            </plist>
            EOF
      - name: Export IPA
        run: |
          cd ${{ github.workspace }}
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/$ARCHIVE_PATH -exportOptionsPlist $IOS_INFO_PLIST -exportPath $RUNNER_TEMP/build